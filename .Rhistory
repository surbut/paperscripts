library(patchwork)
theme_set(theme_classic())
bPal  = c("#006DB6",   "#F36C3E", "#00AFD7", "#B12028", "#80BC42", "#69488E", "#FFCD00", "#63666A", "#000000", "#FFFFFF")
###############
## Data load ##
###############
# Z
z = readRDS("~/Dropbox/combinedpost_Z_MVP_mash_v.rds")
z_original = readRDS("~/Dropbox/forsatoshi/ldsc_html/zmash.rds")
p_original = 2*pnorm(-abs(z_original))
gws = which(p_original<5e-8)
# lsfr
lfsr = readRDS("~/Dropbox/forsatoshi/ldsc_html/combined_shared_lfsr_mvp_mash_chr_bp.rds")
lfsr = lfsr[,3:6]
# lfdr
lfdr = readRDS("~/Dropbox/forsatoshi/ldsc_html/combined_lfdr.rds")
lfdr = lfdr[rownames(lfsr),]
ash_lfdr=readRDS("~/Dropbox/ash_mvp_lfdr.rds")
rownames(ash_lfdr)=rownames(lfdr)
# ldsc
#ldsc = fread("~/Dropbox/forsatoshi//ldsc_html/LDSC_matched.txt")
ldsc = read.table("~/Dropbox//LDSC_matched1.txt",header = T)
####################
## check the data ##
####################
median(abs(z[lfsr<0.05])) # 0.152888
median(abs(z[lfdr<0.05])) # 0.1533309
median(abs(z[gws]))       # 6.546423
#################
# downsampling ##
#################
set.seed(1111)
r = sample(rownames(lfsr),10000)
#####################
### Original plot ###
#####################
z_plot = z[r,]
z_o = z_original[r,]
p_plot = 2*pnorm(-abs(z_o))
median(abs(z[2*pnorm(-abs(z_o))<0.05,]))
##png("../result/ldsc.original.#png")
plot(lfsr[r,"hdl"],
log(abs(z_plot[,"hdl"])),
pch=1, xlab="LFSR",
ylab="log(|Posterior Std Effect|)",
col="green",
cex=0.1,
xlim=c(.65,0),
ylim=c(-20, 5))
points((lfsr[r,"ldl"]), log(abs(z_plot[,"ldl"])),pch=1,col="red",cex=0.1)
points((lfsr[r,"tg"]), log(abs(z_plot[,"tg"])),pch=1,col="blue",cex=0.1)
legend("bottomright",c("hdl","ldl","tg"),pch=1,col=c("green","red","blue"))
abline(h=0,lty="dashed")
##dev.off()
######################
## LFSR vs abs Beta ##
######################
color_theme = scale_color_manual(breaks=c("hdl", "ldl", "tg"), values=bPal[1:3], labels=c("HDLC", "LDLC", "TG"))
z_df = data.frame(z)
z_df$snp = row.names(z_df)
z_long = z_df[r,] %>% gather(key, z, -snp)
lfsr_df = data.frame(lfsr)
lfsr_df$snp = row.names(lfsr_df)
lfsr_long = lfsr_df[r,] %>% gather(key, lfsr, -snp)
lfdr_df = data.frame(lfdr)
lfdr_df$snp = row.names(lfdr_df)
lfdr_long = lfdr_df[r,] %>% gather(key, lfdr, -snp)
ash_lfdr_df = data.frame(ash_lfdr)
ash_lfdr_df$snp = row.names(ash_lfdr_df)
ash_lfdr_long = lfdr_df[r,] %>% gather(key, lfdr, -snp)
orgp_df = data.frame(p_original)
orgp_df$snp = row.names(orgp_df)
orgp_long = orgp_df[r,] %>% gather(key, orgp, -snp)
orgz_df = data.frame(z_original)
orgz_df$snp = row.names(z_df)
orgz_long = orgz_df[r,] %>% gather(key, orgz, -snp)
mg = inner_join(z_long, lfsr_long, by=c("snp"="snp", "key"="key")) %>%
inner_join(lfdr_long, by=c("snp"="snp", "key"="key")) %>%
inner_join(orgp_long, by=c("snp"="snp", "key"="key")) %>%
inner_join(orgz_long, by=c("snp"="snp", "key"="key"))
beta_p = mg %>% filter(key!="tc") %>%
ggplot(aes(x=orgp, y=log(abs(orgz)),color=key)) +
geom_point(size=0.1, alpha=0.1)  +
labs(x="P", y="Log(|Standardized Effect|)") +
facet_grid(.~key) +
theme(
legend.position = c(1,0),
legend.justification = c(1,0),
legend.title = element_blank(),
legend.key = element_blank(),
legend.background = element_blank(),
legend.key.size = unit(0.4, 'cm'),
legend.text = element_text(size=7),
axis.title = element_text(size=7),
axis.text = element_text(size=7)
) + scale_x_reverse() +
scale_x_reverse() +
guides(color = guide_legend(override.aes = list(alpha = 1, size=1))) +
color_theme
lfdr_beta = mg %>% filter(key!="tc") %>%
ggplot(aes(x=lfdr, y=log(abs(z)), color=key)) +
geom_point(size=0.1, alpha=0.1)  +
labs(x="LFDR", y="Log(|Standardized Posterior Effect|)") +
facet_grid(.~key) +
theme(
legend.position = c(1,0),
legend.justification = c(1,0),
legend.title = element_blank(),
legend.key = element_blank(),
legend.background = element_blank(),
legend.key.size = unit(0.4, 'cm'),
legend.text = element_text(size=7),
axis.title = element_text(size=7),
axis.text = element_text(size=7)
) + scale_x_reverse() +
guides(color = guide_legend(override.aes = list(alpha = 1, size=1))) +
color_theme
lfdr_lfsr = mg %>% filter(key!="tc") %>%
ggplot(aes(x=lfdr, y=lfsr, color=key)) +
geom_point(size=0.1, alpha=0.1)  +
labs(x="LFDR", y="LFSR") +
facet_grid(.~key) +
theme(
legend.position = c(0,0),
legend.justification = c(0,0),
legend.title = element_blank(),
legend.key = element_blank(),
legend.background = element_blank(),
legend.key.size = unit(0.4, 'cm'),
legend.text = element_text(size=7),
axis.title = element_text(size=7),
axis.text = element_text(size=7)
) + scale_x_reverse() +
guides(color = guide_legend(override.aes = list(alpha = 1, size=1))) +
color_theme
##############
## LD score ##
##############
ldsc$L2IDX = as.numeric(cut(ldsc$L2, quantile(ldsc$L2, seq(0,1,length=101)), labels=1:100, include.lowest=T))
plt = ldsc %>% group_by(L2IDX) %>% summarize(X=median(L2), NonNullP = 1-median(abs(hdl))) %>% data.frame
ldsc_lfsr = plt %>% ggplot(aes(x=X, y=NonNullP)) +
labs(x="LD score bin", y="Non null probability") +
geom_smooth(method='lm', formula=y~log(x),
se=FALSE, size=1, color='black') +
geom_point(color=bPal[1]) +
scale_x_continuous(breaks=c(0,25,50,75,100,150,300)) +
theme(
legend.position="None",
axis.title = element_text(size=7),
axis.text = element_text(size=7)
)
#png("../result/ldscore.#png", res=300, width=900, height=800)
ldsc_lfsr
#dev.off()
##############
## Assembly ##
##############
##png("../result/lfsr_beta.#png", res=300, width=2100, height=1400)
(beta_p|lfdr_beta)/(lfdr_lfsr|ldsc_lfsr) + plot_annotation(tag_levels='a')
ldsc$L2IDX = as.numeric(cut(ldsc$L2, quantile(ldsc$L2, seq(0,1,length=101)), labels=1:100, include.lowest=T))
plt = ldsc %>% group_by(L2IDX) %>% summarize(X=median(L2), NonNullP = 1-median(abs(hdl))) %>% data.frame
ldsc_lfsr = plt %>% ggplot(aes(x=X, y=NonNullP)) +
labs(x="LD score bin", y="Non null probability") +
geom_smooth(method='lm', formula=y~exp(x),
se=FALSE, size=1, color='black') +
geom_point(color=bPal[1]) +
scale_x_continuous(breaks=c(0,25,50,75,100,150,300)) +
theme(
legend.position="None",
axis.title = element_text(size=7),
axis.text = element_text(size=7)
)
#png("../result/ldscore.#png", res=300, width=900, height=800)
ldsc_lfsr
ldsc$L2IDX = as.numeric(cut(ldsc$L2, quantile(ldsc$L2, seq(0,1,length=101)), labels=1:100, include.lowest=T))
plt = ldsc %>% group_by(L2IDX) %>% summarize(X=median(L2), NonNullP = 1-median(abs(hdl))) %>% data.frame
ldsc_lfsr = plt %>% ggplot(aes(x=X, y=NonNullP)) +
labs(x="LD score bin", y="Non null probability") +
geom_smooth(method='lm', #formula=y~x,
se=FALSE, size=1, color='black') +
geom_point(color=bPal[1]) +
scale_x_continuous(breaks=c(0,25,50,75,100,150,300)) +
theme(
legend.position="None",
axis.title = element_text(size=7),
axis.text = element_text(size=7)
)
#png("../result/ldscore.#png", res=300, width=900, height=800)
ldsc_lfsr
#dev.off()
ldsc_lfsr = plt %>% ggplot(aes(x=X, y=NonNullP)) +
labs(x="LD score bin", y="Non null probability") +
#geom_smooth(method='lm', #formula=y~x,
#se=FALSE, size=1, color='black') +
geom_point(color=bPal[1]) +
scale_x_continuous(breaks=c(0,25,50,75,100,150,300)) +
theme(
legend.position="None",
axis.title = element_text(size=7),
axis.text = element_text(size=7)
)
#png("../result/ldscore.#png", res=300, width=900, height=800)
ldsc_lfsr
#dev.off()
mvp  = read.table("../data/mash_materials/venn_diagrams/blocks_mvp.txt",  header=T)
ukbb = read.table("../data/mash_materials/venn_diagrams/blocks_ukbb.txt", header=T)
mtag = read.table("../data/mash_materials/venn_diagrams/blocks_mtag.txt", header=T)
set.seed(2222)
fit.hdl=euler(list("MVP:mash"=which(mvp$hdl==1),
"UKBB:mash"=which(ukbb$hdl==1),
"MVP:mtag"=which(mtag$hdl==1)))
library(eulerr)
mvp  = read.table("../data/mash_materials/venn_diagrams/blocks_mvp.txt",  header=T)
ukbb = read.table("../data/mash_materials/venn_diagrams/blocks_ukbb.txt", header=T)
mtag = read.table("../data/mash_materials/venn_diagrams/blocks_mtag.txt", header=T)
set.seed(2222)
fit.hdl=euler(list("MVP:mash"=which(mvp$hdl==1),
"UKBB:mash"=which(ukbb$hdl==1),
"MVP:mtag"=which(mtag$hdl==1)))
library(tidyverse)
library(ggforce)
library(eulerr)
library(patchwork)
theme_set(theme_classic())
bPal  = c("#006DB6",   "#F36C3E", "#00AFD7", "#B12028", "#80BC42", "#69488E", "#FFCD00", "#63666A", "#000000", "#FFFFFF")
################
## forestplot ##
################
##Orignal
raw.hdl = read.csv(("../data/mash_materials/mvp_complete_torus/original/original_z_mvp.hdl.zscore.torus.merged.csv"))
raw.hdl = raw.hdl[-which(raw.hdl$annotation=="GTEx_FE_META_TISSUE_GE_MaxCPP"),]
rownames(raw.hdl) = raw.hdl$annotation
## Mash
mash.hdl = read.csv("../data/mash_materials/mvp_complete_torus/mash/hdl.zscore.torus.merged.csv")
mash.hdl = mash.hdl[-which(mash.hdl$annotation=="GTEx_FE_META_TISSUE_GE_MaxCPP"),]
rownames(mash.hdl) = mash.hdl$annotation
targetanno= c("H3K27ac_Hnisz",
"Coding_UCSC.extend.500",
"Coding_UCSC",
"SuperEnhancer_Hnisz",
"Intron_UCSC",
"Promoter_UCSC",
"Human_Enhancer_Villar",
"Backgrd_Selection_Stat",
"Repressed_Hoffman")
mash.hdl = mash.hdl[rev(targetanno),]
raw.hdl = raw.hdl[rev(targetanno),]
df1 = mash.hdl[,c(1:4)]
colnames(df1) = c("Outcome","log2OR","Lower","Upper")
df1$se = (df1$log2OR-df1$Lower)/1.96
df2=raw.hdl[,c(1:4)]
colnames(df2)=c("Outcome","log2OR","Lower","Upper")
df2$se=(df2$log2OR-df2$Lower)/1.96
df1$group = "mash"
df2$group = "univariate"
df2[,c("log2OR","Lower","Upper")]
# combine the two datasets
df = rbind(df1,df2)
z = (df1$log2OR-df2$log2OR)/sqrt(df1$se^2+df2$se^2)
p = 2*pnorm(-1*abs(z))
df$p  = c(p,p)
df$fp = format.pval(df$p,digits=1)
#rownames(df)=df$Outcome
p = df %>%
ggplot(aes(y=reorder(Outcome, desc(p)), x=log2OR, xmin=Lower, xmax=Upper, col=group)) +
geom_vline(xintercept=0, lty=2, color='gray80') +
geom_point(size=2, position=position_dodge(width = 0.5)) +
geom_errorbarh(height=0, size=1, position=position_dodge(width = 0.5)) +
scale_y_discrete(name="Annotation") +
scale_x_continuous(name="Log2 Odds ratio in HDL",
limits = c(-5, 12), breaks=c(-5,0,5,10),
labels=c(-5,0,5,"P-value"), position='top') +
geom_text(aes(x=10, y=Outcome, label=fp), hjust=0.5, color='black', size=2.5) +
theme(
legend.position = "bottom",
legend.title = element_blank(),
axis.text.y= element_text(size=6, color='black'),
axis.text.x= element_text(size=6, color='black'),
axis.title.y= element_blank(),
axis.title.x= element_text(size=6),
axis.line = element_blank()
) +
scale_color_manual(breaks=c("mash", "univariate"), values=bPal[2:3]) +
guides(color=guide_legend(nrow=2))
p = readRDS("../result/forestplot.hdl.RDS")
##########################
## Venn for replication ##
##########################
mvp  = read.table("../data/mash_materials/venn_diagrams/blocks_mvp.txt",  header=T)
ukbb = read.table("../data/mash_materials/venn_diagrams/blocks_ukbb.txt", header=T)
mtag = read.table("../data/mash_materials/venn_diagrams/blocks_mtag.txt", header=T)
set.seed(2222)
fit.hdl=euler(list("MVP:mash"=which(mvp$hdl==1),
"UKBB:mash"=which(ukbb$hdl==1),
"MVP:mtag"=which(mtag$hdl==1)))
mvp  = read.table("~/Dropbox/mash_materials/venn_diagrams/blocks_mvp.txt",  header=T)
ukbb = read.table("~/Dropbox/mash_materials/venn_diagrams/blocks_ukbb.txt", header=T)
mtag = read.table("~/Dropbox/mash_materials/venn_diagrams/blocks_mtag.txt", header=T)
set.seed(2222)
fit.hdl=euler(list("MVP:mash"=which(mvp$hdl==1),
"UKBB:mash"=which(ukbb$hdl==1),
"MVP:mtag"=which(mtag$hdl==1)))
mvp  = read.table("~/Dropbox/mash_materials/blocks_mvp.txt",  header=T)
ukbb = read.table("~/Dropbox/mash_materials//blocks_ukbb.txt", header=T)
mtag = read.table("~/Dropbox/mash_materials//blocks_mtag.txt", header=T)
mvp  = read.table("~/Dropbox/mash_materials/blocks_mvp.txt",  header=T)
ukbb = read.table("~/Dropbox/mash_materials/blocks_ukbb.txt", header=T)
mtag = read.table("~/Dropbox/mash_materials/blocks_mtag.txt", header=T)
mvp  = read.table("~/Dropbox (Personal)//mash_materials/blocks_mvp.txt",  header=T)
mvp  = read.table("~/Dropbox (Personal)//mash_materials/blocks_mvp.txt",  header=T)
ukbb = read.table("~/Dropbox/mash_materials//blocks_ukbb.txt", header=T)
mtag = read.table("~/Dropbox/mash_materials//blocks_mtag.txt", header=T)
mvp  = read.table("~/Dropbox (Personal)//mash_materials/blocks//blocks_mvp.txt",  header=T)
ukbb = read.table("~/Dropbox/mash_materials//blocks/blocks_ukbb.txt", header=T)
mtag = read.table("~/Dropbox/mash_materials/blocks/blocks_mtag.txt", header=T)
set.seed(2222)
fit.hdl=euler(list("MVP:mash"=which(mvp$hdl==1),
"UKBB:mash"=which(ukbb$hdl==1),
"MVP:mtag"=which(mtag$hdl==1)))
head(fit.hdl)
fit.hdl$fitted.values
fit.ldl=euler(list("MVP:mash"=which(mvp$ldl==1),
"UKBB:mash"=which(ukbb$ldl==1),
"MVP:mtag"=which(mtag$ldl==1)))
fit.ldl$fitted.values
df=readRDS("output/amit_df_bp.rds")
dat=df
setwd("~/paperscripts/analysis")
setwd("../")
df=readRDS("output/amit_df_bp.rds")
dat=df
sum(df$phenos.enrollment<55&df$phenos.CAD_censor_age<55&df$phenos.has_CAD==1&df$prs.r>80)
sum(df$phenos.enrollment<55&df$phenos.CAD_censor_age<55&df$phenos.has_CAD==1&df$prs.r>0.80)
> sum(df$phenos.enrollment<55&df$df$phenos.has_CAD==1&df$prs.r>0.80)
sum(df$phenos.enrollment<55&df$df$phenos.has_CAD==1&df$prs.r>0.80)
[1] 426
sum(df$phenos.enrollment<55&df$phenos.has_CAD==1&df$prs.r>0.80)
sum(df$phenos.enrollment<55&df$phenos.has_CAD==1&df$ascvd_10y_accaha_all>7.5)
sum(df$phenos.enrollment<55&df$phenos.has_CAD==1)
source("code/utils.R")
df=data.frame(readRDS("output/amit_df.rds"))
df$chd=df$phenos.has_CAD
df$AGE1=df$phenos.enrollment
# m=rbind(df[,c("AGE1","prs.r","ascvd_10y_accaha","chd")],dff[,c("AGE1","prs.r","ascvd_10y_accaha","chd")])
#
# df=m
# df=df[df$AGE1>=40&df$AGE1<=70,]
library(scales)
hex <- hue_pal()(6)
i=df %>% mutate(ints=cut(AGE1,breaks=c(39.99,45,50,55,60,65,70,75)))
i=i[!is.na(i$ints),]
fulla=i%>%group_by(ints)%>%summarise("PRS"=sum(chd==1&ascvd_10y_accaha_all<7.5&prs.r>0.80)/sum(chd==1),"PCE"=sum(chd==1&ascvd_10y_accaha_all>7.5&prs.r<0.80)/sum(chd==1),"Both"=sum(chd==1&ascvd_10y_accaha_all>7.5&prs.r>0.80)/sum(chd==1),"n"=length(ints))
fulla
sum(df$phenos.enrollment<45&df$phenos.has_CAD==1)
sum(df$phenos.enrollment<45&df$phenos.has_CAD==1&df$prs.r>0.80)
sum(df$phenos.enrollment<45&df$phenos.has_CAD==1&df$ascvd_10y_accaha_all>7.5)
181-87
181/97
sum(df$phenos.enrollment<45&df$phenos.has_CAD==1&df$prs.r>0.80&df$ascvd_10y_accaha_all<7.5)
sum(df$phenos.enrollment<45&df$phenos.has_CAD==1&df$prs.r>0.80&df$ascvd_10y_accaha_all<7.5)
sum(df$phenos.enrollment<45&df$phenos.has_CAD==1&df$ascvd_10y_accaha_all>7.5&df$prs.r<0.80)
sum(df$phenos.enrollment<45&df$phenos.has_CAD==1&df$prs.r>0.80&df$ascvd_10y_accaha_all<7.5&df$phenos.CAD_censor_age<55)
sum(df$phenos.enrollment<45&df$phenos.has_CAD==1&df$prs.r>0.80&df$ascvd_10y_accaha_all<7.5&df$phenos.CAD_censor_age<55)
sum(df$phenos.enrollment<45&df$phenos.has_CAD==1&df$ascvd_10y_accaha_all>7.5&df$prs.r<0.80&df$phenos.CAD_censor_age<55)
125/39
sum(df$phenos.enrollment<45&df$phenos.has_CAD==1&df$prs.r>0.80&df$ascvd_10y_accaha_all<7.5&df$phenos.CAD_censor_age<60)
125
sum(df$phenos.enrollment<45&df$phenos.has_CAD==1&df$ascvd_10y_accaha_all>7.5&df$prs.r<0.80&df$phenos.CAD_censor_age<60)
138/44
int
ints
sum(df$phenos.enrollment>55&df$phenos.has_CAD==1&df$prs.r>0.80&df$ascvd_10y_accaha_all<7.5)
sum(df$phenos.enrollment>55&df$phenos.has_CAD==1&df$ascvd_10y_accaha_all>7.5&df$prs.r<0.80)
df=readRDS("output/amit_df.rds")
df$prscat <- cut(df$prs.r, breaks=c(0, 0.20,0.80,1), labels=c("low", "intermediate","high"))
set.seed(456)
#which(df$phenos.enrollment>ages[i]&df$phenos.enrollment<ages[i+1])
d=df[df$phenos.enrollment<55,]
indices=sample(nrow(d))
d_train=d[indices[1:(length(indices)/2)],]
d_test=d[indices[(length(indices)/2+1):length(indices)],]
model_glm = glm(phenos.has_CAD  ~ prscat, data = d_train, family = "binomial")
test_prob = predict(model_glm, newdata = d_test, type = "response")
test_roc = roc(d_test$phenos.has_CAD~ test_prob, plot = F)
test_roc$auc
sqrt(var(test_roc))
df=readRDS("output/amit_df.rds")
df$prscat <- cut(df$prs.r, breaks=c(0, 0.20,0.80,1), labels=c("low", "intermediate","high"))
set.seed(456)
#which(df$phenos.enrollment>ages[i]&df$phenos.enrollment<ages[i+1])
d=df[df$phenos.enrollment<45,]
indices=sample(nrow(d))
d_train=d[indices[1:(length(indices)/2)],]
d_test=d[indices[(length(indices)/2+1):length(indices)],]
model_glm = glm(phenos.has_CAD  ~ prscat, data = d_train, family = "binomial")
test_prob = predict(model_glm, newdata = d_test, type = "response")
test_roc = roc(d_test$phenos.has_CAD~ test_prob, plot = F)
test_roc$auc
sqrt(var(test_roc))
model_glm = glm(phenos.has_CAD  ~ ascvdcat_all, data = d_train, family = "binomial")
test_prob = predict(model_glm, newdata = d_test, type = "response")
test_roc = roc(d_test$phenos.has_CAD~ test_prob,plot=F)
test_roc$auc
sqrt(var(test_roc))
d=df[df$phenos.enrollment<45,]
indices=sample(nrow(d))
d_train=d[indices[1:(length(indices)/2)],]
d_test=d[indices[(length(indices)/2+1):length(indices)],]
model_glm = glm(phenos.has_CAD  ~ prscat, data = d_train, family = "binomial")
test_prob = predict(model_glm, newdata = d_test, type = "response")
test_roc = roc(d_test$phenos.has_CAD~ test_prob, plot = F)
test_roc$auc
sqrt(var(test_roc))
### for pce
model_glm = glm(phenos.has_CAD  ~ ascvdcat_all, data = d_train, family = "binomial")
test_prob = predict(model_glm, newdata = d_test, type = "response")
test_roc = roc(d_test$phenos.has_CAD~ test_prob,plot=F)
test_roc$auc
sqrt(var(test_roc))
prs.roc=test_roc$auc
sqrt(var(test_roc))
### for pce
model_glm = glm(phenos.has_CAD  ~ ascvdcat_all, data = d_train, family = "binomial")
test_prob = predict(model_glm, newdata = d_test, type = "response")
test_roc = roc(d_test$phenos.has_CAD~ test_prob,plot=F)
pce.roc=test_roc$auc
sqrt(var(test_roc))
prs.roc-pce.roc
d=df[df$phenos.enrollment<45,]
indices=sample(nrow(d))
d_train=d[indices[1:(length(indices)/2)],]
d_test=d[indices[(length(indices)/2+1):length(indices)],]
model_glm = glm(phenos.has_CAD  ~ prscat, data = d_train, family = "binomial")
test_prob = predict(model_glm, newdata = d_test, type = "response")
test_roc = roc(d_test$phenos.has_CAD~ test_prob, plot = F)
prs.roc=test_roc$auc
sqrt(var(test_roc))
### for pce
model_glm = glm(phenos.has_CAD  ~ ascvdcat_all, data = d_train, family = "binomial")
test_prob = predict(model_glm, newdata = d_test, type = "response")
test_roc = roc(d_test$phenos.has_CAD~ test_prob,plot=F)
pce.roc=test_roc$auc
sqrt(var(test_roc))
prs.roc-pce.roc
s.prs
prs.roc=test_roc$auc
s.prs=sqrt(var(test_roc))
### for pce
model_glm = glm(phenos.has_CAD  ~ ascvdcat_all, data = d_train, family = "binomial")
test_prob = predict(model_glm, newdata = d_test, type = "response")
test_roc = roc(d_test$phenos.has_CAD~ test_prob,plot=F)
pce.roc=test_roc$auc
s.pce=sqrt(var(test_roc))
s.prs
s.pce
(prs.roc-pce.roc)+1.96*s.prs
(prs.roc-pce.roc)-1.96*s.prs
s.prs
prs.roc-pce.roc
d=df[df$phenos.enrollment<45,]
indices=sample(nrow(d))
d_train=d[indices[1:(length(indices)/2)],]
d_test=d[indices[(length(indices)/2+1):length(indices)],]
model_glm = glm(phenos.has_CAD  ~ prscat, data = d_train, family = "binomial")
test_prob = predict(model_glm, newdata = d_test, type = "response")
test_roc = roc(d_test$phenos.has_CAD~ test_prob, plot = F)
prs.roc=test_roc$auc
s.prs=sqrt(var(test_roc))
### for pce
model_glm = glm(phenos.has_CAD  ~ ascvdcat_all, data = d_train, family = "binomial")
test_prob = predict(model_glm, newdata = d_test, type = "response")
test_roc = roc(d_test$phenos.has_CAD~ test_prob,plot=F)
pce.roc=test_roc$auc
s.pce=sqrt(var(test_roc))
(prs.roc-pce.roc)+1.96*s.prs
(prs.roc-pce.roc)-1.96*s.prs
(prs.roc-pce.roc)+1.96*(s.prs-s.pce)
(prs.roc-pce.roc)-1.96*(s.prs-s.pce)
sqrt(s.pce^2+s.prs^2)
dim(d)
delta.auc=prs.roc-pce.roc
se=sqrt(s.pce^2+s.prs^2)
df=dim(d)[1]+dim(d)[1]-2
delta.auc+se*1.96
delta.auc-se*1.96
se
sqrt(s.pce^2+s.prs^2)
s.pce
s.prs
#which(df$phenos.enrollment>ages[i]&df$phenos.enrollment<ages[i+1])
d=df[df$phenos.enrollment<45,]
indices=sample(nrow(d))
d_train=d[indices[1:(length(indices)/2)],]
d_test=d[indices[(length(indices)/2+1):length(indices)],]
model_glm = glm(phenos.has_CAD  ~ prscat, data = d_train, family = "binomial")
test_prob = predict(model_glm, newdata = d_test, type = "response")
test_roc = roc(d_test$phenos.has_CAD~ test_prob, plot = F)
prs.roc=test_roc$auc
s.prs=sqrt(var(test_roc))
### for pce
model_glm = glm(phenos.has_CAD  ~ ascvdcat_all, data = d_train, family = "binomial")
test_prob = predict(model_glm, newdata = d_test, type = "response")
test_roc = roc(d_test$phenos.has_CAD~ test_prob,plot=F)
pce.roc=test_roc$auc
s.pce=sqrt(var(test_roc))
delta.auc=prs.roc-pce.roc
se=sqrt(s.pce^2+s.prs^2)
df=dim(d)[1]+dim(d)[1]-2
s.pce
s.prs
delta.auc+se
delta.auc-se
